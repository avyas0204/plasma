<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://www.servicelabs.org/plasma/provisioning"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    xmlns:prov="http://www.servicelabs.org/plasma/provisioning">

    <xs:annotation>
        <xs:documentation>
        The PlasmaSDO&#8482; provisioning model is an intermediate staging or marshaling model which represents a simplified and "merged" view of any number of linked XMI/UML documents as XML. It accommodates basic UML structural and behavioral elements along with profile stereotype elements from the PlasmaSDO&#8482; UML Profile. The goal is to provide an XML representation that more readily supports the use of "templating" languages such as XSLT. It resolves common problems associated with the XML representation of stereotyped UML models, such as representation of graph structures and linkage of stereotype instances to respective targets. Representation of graph structures is accommodated using reference or "ref" elements which are namespace qualified. And as a convenience, profile stereotypes are represented as child "delegate" objects directly under the target element being annotated, rather than placing the burden on processors to locate stereotypes at the root (XMI) level and link them.
        </xs:documentation>
    </xs:annotation>

    <xs:complexType name="Element">
        <xs:annotation><xs:documentation>A common superclass for all provisioning elements</xs:documentation></xs:annotation>
		<xs:attribute name="id" type="xs:string" use="optional">
            <xs:annotation><xs:documentation>A UUID or other ID passed from source models or generated at runtime</xs:documentation></xs:annotation>
		</xs:attribute>
    </xs:complexType>
    <xs:element name="Element" type="prov:Element"/>

    <xs:complexType name="NamedElement" abstract="true">
        <xs:annotation>
            <xs:documentation></xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:Element">
		        <xs:sequence>
		            <xs:element ref="prov:Alias" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Derivation" minOccurs="0" maxOccurs="1"/>
		        </xs:sequence>
		        <xs:attribute name="name" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="NamedElement" type="prov:NamedElement"/>
    
    <xs:complexType name="Model">
        <xs:annotation><xs:documentation>A container for packages</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:Package">
		        <xs:sequence>
		            <xs:element name="RootClass" type="prov:ClassRef" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Package" minOccurs="0" maxOccurs="unbounded"/>
		        </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="Model" type="prov:Model"/>

    <xs:complexType name="ModelAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for a model element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="ModelAppInfo" type="prov:ModelAppInfo"/>

    <xs:complexType name="Package">
        <xs:annotation><xs:documentation>A provisioning package</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:sequence>
		            <xs:element ref="prov:Documentation" minOccurs="0" maxOccurs="unbounded"/>
		            <xs:element ref="prov:Class" minOccurs="1" maxOccurs="unbounded"/>
		            <xs:element ref="prov:Enumeration" minOccurs="0" maxOccurs="unbounded"/>
		        </xs:sequence>
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="Package" type="prov:Package"/>
    
    <xs:complexType name="PackageRef">
        <xs:annotation>
            <xs:documentation>A reference to a package</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
                <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="PackageRef" type="prov:PackageRef"/>

    <xs:complexType name="PackageAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for a package element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="PackageAppInfo" type="prov:PackageAppInfo"/>

    <xs:complexType name="Documentation">
        <xs:annotation>
            <xs:documentation>Provides documentation for provisioning elements</xs:documentation>
        </xs:annotation>        
        <xs:sequence>
            <xs:element ref="prov:Body" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute use="required" type="prov:DocumentationType" name="type">
            <xs:annotation>
                <xs:documentation />
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="Documentation" type="prov:Documentation"/>

    <xs:complexType name="Type" abstract="true">
        <xs:annotation>
            <xs:documentation>A type abstraction used for both datatypes, classes, enumerations etc..</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="Type" type="prov:Type"/>

    <xs:complexType name="TypeRef" abstract="true">
        <xs:annotation>
            <xs:documentation>A reference to a type abstraction used for both datatypes and classes</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
                <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="TypeRef" type="prov:TypeRef"/>

    <xs:complexType name="Class">
        <xs:annotation>
            <xs:documentation>A class definition</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:Type">
                <xs:sequence>
                    <xs:element ref="prov:Documentation" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element ref="prov:Property" maxOccurs="unbounded"/>
                    <xs:element name="SuperClass" type="prov:ClassRef" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element ref="prov:Behavior" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="uri" type="xs:string" use="required"/>
                <xs:attribute name="abstract" type="xs:boolean" use="optional" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>   
    <xs:element name="Class" type="prov:Class"/>
    
    <xs:complexType name="Behavior">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="language" type="xs:string" use="required"/>
                <xs:attribute name="type" type="prov:BehaviorType" use="required"/>
            </xs:extension>                
        </xs:simpleContent>
    </xs:complexType>
    <xs:element name="Behavior" type="prov:Behavior"/>

    <xs:simpleType name="BehaviorType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="create"/>        
            <xs:enumeration value="drop"/>       
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ClassAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for a class element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="ClassAppInfo" type="prov:ClassAppInfo"/>
 
    <xs:complexType name="PropertyRef">
        <xs:annotation><xs:documentation>References a class property and serves as a property abstraction to avoid circular references within XML marshaling</xs:documentation></xs:annotation>
        <xs:sequence>
            <xs:element ref="prov:ClassRef" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation><xs:documentation>The property name, unique within a class</xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="PropertyRef" type="prov:PropertyRef"/> 
    
    <xs:complexType name="ClassRef">
        <xs:annotation>
            <xs:documentation>References a class and serves as a type abstraction to avoid circular references within XML marshaling</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:TypeRef">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="ClassRef" type="prov:ClassRef"/>

    <xs:complexType name="Property">
        <xs:annotation><xs:documentation>A property definition</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:sequence>
		            <xs:element ref="prov:Documentation" minOccurs="0" maxOccurs="unbounded"/>
		            <xs:element name="type" type="prov:TypeRef" minOccurs="1" maxOccurs="1"/>
		            <xs:element ref="prov:Key" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Concurrent" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:UniqueConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:ValueConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:EnumerationConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:ValueSetConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Sort" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:XmlProperty" minOccurs="0" maxOccurs="1"/>		            
		        </xs:sequence>
		        <xs:attribute name="visibility" type="prov:VisibilityType" use="required"/>
		        <xs:attribute name="nullable" type="xs:boolean" use="required"/>
		        <xs:attribute name="many" type="xs:boolean" use="required"/>
		        <xs:attribute name="derived" type="xs:boolean" use="optional"/>
		        <xs:attribute name="opposite" type="xs:string" use="optional"/>
		        <xs:attribute name="containment" type="xs:boolean" use="optional"/>
		        <xs:attribute name="readOnly" type="xs:boolean" use="optional"/>
                    
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
	<xs:element name="Property" type="prov:Property"/>
	
    <xs:complexType name="PropertyAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for a property element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:sequence>
		            <xs:element ref="prov:Key" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Concurrent" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:UniqueConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:ValueConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:EnumerationConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:ValueSetConstraint" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:Sort" minOccurs="0" maxOccurs="1"/>
		            <xs:element ref="prov:XmlProperty" minOccurs="0" maxOccurs="1"/>		            
		        </xs:sequence>
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="PropertyAppInfo" type="prov:PropertyAppInfo"/>

    <xs:complexType name="Enumeration">
        <xs:annotation>
            <xs:documentation>An enumeration definition</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:Type">
                <xs:sequence>
                    <xs:element ref="prov:Documentation" maxOccurs="unbounded"/>
                    <xs:element ref="prov:EnumerationLiteral" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>   
    <xs:element name="Enumeration" type="prov:Enumeration"/>

    <xs:complexType name="EnumerationAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for an enumeration element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="EnumerationAppInfo" type="prov:EnumerationAppInfo"/>
    
    <xs:complexType name="EnumerationRef">
        <xs:annotation>
            <xs:documentation>References an enumeration and serves as a type abstraction to avoid circular references within XML marshaling</xs:documentation>
        </xs:annotation>        
        <xs:complexContent>
            <xs:extension base="prov:TypeRef">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="EnumerationRef" type="prov:EnumerationRef"/>

    <xs:complexType name="EnumerationLiteral">
        <xs:annotation><xs:documentation>An enumeration literal definition</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:sequence>
		            <xs:element ref="prov:Documentation" maxOccurs="unbounded"/>
		        </xs:sequence>
		        <xs:attribute name="value" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="EnumerationLiteral" type="prov:EnumerationLiteral"/>    

    <xs:complexType name="EnumerationLiteralAppInfo">
        <xs:annotation><xs:documentation>Application specific provisioning information for an enumeration literal element</xs:documentation></xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:NamedElement">
		        <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="EnumerationLiteralAppInfo" type="prov:EnumerationLiteralAppInfo"/>

    <xs:complexType name="DataTypeRef">
        <xs:annotation>
            <xs:documentation>An SDO datatype reference</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="prov:TypeRef">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="DataTypeRef" type="prov:DataTypeRef"/>
    
    
    <xs:complexType name="Body">
        <xs:annotation><xs:documentation>A container for provisioning content</xs:documentation></xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" type="xs:string" use="optional"/>
            </xs:extension>                
        </xs:simpleContent>
    </xs:complexType>

    <xs:element name="Body" type="prov:Body">
        <xs:annotation>
            <xs:documentation></xs:documentation>
        </xs:annotation>
    </xs:element>
    
    <xs:simpleType name="VisibilityType">
        <xs:annotation>
            <xs:documentation></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="public" />
            <xs:enumeration value="protected" />
            <xs:enumeration value="private" />
        </xs:restriction>
    </xs:simpleType>
    
    <!-- begin  -->
    <xs:complexType name="Concurrent">
        <xs:annotation>
            <xs:documentation>This stereotype annotates or tags UML properties for use within various operations involving concurrency control. Concurrency control deals with handling collisions and other issues which arise when allowing multiple users or processes simultaneous access to shared entities within a data store. UML properties tagged with this stereotype contain metadata instructive, for example to an SDO Data Access Service (DAS) during commit operations for modified data graphs.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="required" type="prov:ConcurrencyType" name="type">
            <xs:annotation>
                <xs:documentation>Specifies the general category of concurrency or concurrency control under which a UML property participates</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="required" type="prov:ConcurentDataFlavor" name="dataFlavor">
            <xs:annotation>
                <xs:documentation>For a UML property, denotes or provides a hint as to the nature of the data with respect concurrency or concurrency control</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:Concurrent" name="Concurrent" />
    
    <xs:complexType name="Sort">
        <xs:annotation>
            <xs:documentation>Assigns ordering and other related information to properties within an entity.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="required" type="xs:string" name="key">
            <xs:annotation>
                <xs:documentation>A key used to determine the ordering of properties within a class or entity.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:Sort" name="Sort" />

    <xs:complexType name="ValueConstraint">
        <xs:annotation>
            <xs:documentation />
        </xs:annotation>

        <xs:attribute use="optional" type="xs:string" name="minInclusive">
            <xs:annotation>
                <xs:documentation>Property value must be a number whose value must be higher or equal to the specificed minimum</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="maxInclusive">
            <xs:annotation>
                <xs:documentation>Property value must be a number whose value must be lower or equal to the specified maximum</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        
        <xs:attribute use="optional" type="xs:string" name="minExclusive">
            <xs:annotation>
                <xs:documentation>Specifies the lower bounds for numeric values (the value must be greater than this value)</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="maxExclusive">
            <xs:annotation>
                <xs:documentation>Specifies the upper bounds for numeric values (the value must be less than this value)</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="minLength">
            <xs:annotation>
                <xs:documentation>Property value must be above or equal to the specified minimum boundary</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="maxLength">
            <xs:annotation>
                <xs:documentation>Property value must be below or equal to the specified maximum boundary</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="totalDigits">
            <xs:annotation>
                <xs:documentation>The total number of digits for the Property value must be below or equal to the specified total</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="fractionDigits">
            <xs:annotation>
                <xs:documentation>The number of fraction digits for the Property value must be below or equal to the specified total</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="pattern">
            <xs:annotation>
                <xs:documentation>The Property value must match the specified regular expression. The regular expression follows the Java regular expression conventions.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:ValueConstraint" name="ValueConstraint" />

    <xs:complexType name="EnumerationConstraint">
        <xs:annotation>
            <xs:documentation>This stereotype constrains a UML property by means of a given UML enumeration. It enables use of UML Enumerations which are &lt;b&gt;part&lt;/b&gt; of the UML model when specifying a constraint on class properties. UML Enumerations used with this stereotype must be tagged with the SDOEnumeration stereotype.</xs:documentation>
        </xs:annotation>

        <xs:sequence>
	        <xs:element minOccurs="1" maxOccurs="1" type="prov:EnumerationRef" name="value">
	            <xs:annotation>
	                <xs:documentation>The UML enumeration class with which to restrict a UML property. UML Enumerations used with this stereotype must be tagged with the SDOEnumeration stereotype.</xs:documentation>
	            </xs:annotation>
	        </xs:element>
        </xs:sequence>
        
    </xs:complexType>

    <xs:element type="prov:EnumerationConstraint" name="EnumerationConstraint" />

    <xs:complexType name="Alias">
        <xs:annotation>
            <xs:documentation>This stereotype provides modelling-context specific alternative names for UML named elements within a model. While a UML logical model often differs greatly from a physical model for example, the intent is to provide enough naming and other context specific information to make the physical model entirely reflective or derivitive of the UML logical model. In other words support the generation of multiple context-specific models from a single UML logical model. Modelling context specific names or aliases are particularly important as they often differ greatly between modelling contexts due to various standard naming conventions or technology limitations such as name length.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="optional" type="xs:string" name="physicalName">
            <xs:annotation>
                <xs:documentation>Associates a given UML element with a physical data store element. Where the physical data store is a relational database, this tag contains the name of a relational database table, schema, column or other relational database element.</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="localName">
            <xs:annotation>
                <xs:documentation>Associates a given UML element with a data transfer or transient storage element. Where the transfer medium is XML, this tag contains the name of an XML element or attribute.</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="businessName">
            <xs:annotation>
                <xs:documentation>Associates a given UML element with a business specific, human readable name.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:Alias" name="Alias" />

    <xs:complexType name="Key">
        <xs:annotation>
            <xs:documentation>This stereotype tags or annotates a UML property as representing some type of key within a data store, data transfer or transient storage medium.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="required" type="prov:KeyType" name="type">
            <xs:annotation>
                <xs:documentation>Specifies the type of key</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:Key" name="Key" />

    <xs:simpleType name="KeyType">
        <xs:annotation>
            <xs:documentation>This enumeration specifies the set of key types possible for any UML Property tagged with the SDOKey stereotype.</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="primary">
                <xs:annotation>
                    <xs:documentation>A key used as a primary identifier for the UML Class of the UML Property tagged with the SDOKey stereotype.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="internal">
                <xs:annotation>
                    <xs:documentation>Tags a property as a key used as an internal identifier for a Class</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="external">
                <xs:annotation>
                    <xs:documentation>Tags a property as a key used as an external identifier for a Class. An external identifier may be used by external systems and processes to uniquely idendify an object within the source system without significant central coordination. An external key is typically a universally unique identifier (UUID), globally unique identifier (GUID) or variant</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ConcurentDataFlavor">
        <xs:annotation>
            <xs:documentation>Specifies the nature of the data with respect to concurrency for a UML Property</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="version">
                <xs:annotation>
                    <xs:documentation>Indicates the data is an integral version number, typically incremented for every successful update of the owning entity.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="user">
                <xs:annotation>
                    <xs:documentation>Indicates the data represents a system username, typically reset to the current system user on successful update of the owning entity.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="time">
                <xs:annotation>
                    <xs:documentation>Indicates the data is temporal in nature typically reset to the system data or time for every successful update of the owning entity.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ConcurrencyType">
        <xs:annotation>
            <xs:documentation>Indicates the category of concurrency or concurrency control strategy under which a UML Property participates.</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="optimistic">
                <xs:annotation>
                    <xs:documentation>Indicates a UML Property stores information related optimistic concurrency for its containing UML Class and participates in optimistic concurrency control operations and strategies. Informs SDO Data Access Services performing optimistic concurrency control checks and operations.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="pessimistic">
                <xs:annotation>
                    <xs:documentation>Indicates a UML Property stores information related to a pessimistic concurrency control strategy (often termed locking) and participates in pessimistic concurrency control operations. Informs SDO Data Access Services performing pessimistic concurrency control checks and operations.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="origination">
                <xs:annotation>
                    <xs:documentation>Indicates a UML Property stores origination information for its containing UML Class. Informs Data Access Services (DAS) performing concurrent operations involving origination.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ValueSetConstraint">
        <xs:annotation>
            <xs:documentation>This stereotype allows a value set constraint to be specified for a class attribute. Attributes that have a coded type may be constrained such that the code value in an instance should be taken from the specified value set. The coding strength determines whether exceptions are allowed.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="optional" type="xs:string" name="id">
            <xs:annotation>
                <xs:documentation>The globally unique identifier for the value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="name">
            <xs:annotation>
                <xs:documentation>The descriptive name associated with the value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="versionIdentifier">
            <xs:annotation>
                <xs:documentation>The value which identifies a specific version of the value set. Used when performing static references to a value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="versionDate">
            <xs:annotation>
                <xs:documentation>The date on which a specific version of the value set was created. Used when performing static references to a value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="versionTime">
            <xs:annotation>
                <xs:documentation>The time when a specific version of the value set was created. Used when performing static references to a value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="prov:CodingStrength" name="codingStrength">
            <xs:annotation>
                <xs:documentation>Indicates whether or not codes are restricted to those expressed in the value set</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="minimumValueSetId">
            <xs:annotation>
                <xs:documentation>Defines the set of codes within the overall value set that must be supported by an implementer to be considered compliant</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="ignoredValueSetId">
            <xs:annotation>
                <xs:documentation>Defines the set of codes within the overall value set that the implementer is willing to accept without raising an error, but whose content will be ignored and not processed in any useful manner</xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="rootCode">
            <xs:annotation>
                <xs:documentation>Allows conveying the root code of the value set. Only usable for key structural attributes.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:ValueSetConstraint" name="ValueSetConstraint" />

    <xs:simpleType name="CodingStrength">
        <xs:annotation>
            <xs:documentation>Defines whether the specified element is restricted to only using the identified coding system for the element</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="CNE">
                <xs:annotation>
                    <xs:documentation>If not null, the element must be coded and must be drawn from the value set specified in the binding</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="CWE">
                <xs:annotation>
                    <xs:documentation>If not null, the element must be coded if there is an appropriate value in the value set specified in the binding. If no appropriate code is available, a local code may be used, or the value may be populated with only original text.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="DocumentationType">
        <xs:annotation>
            <xs:documentation />
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="definition">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="documentation">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="appInfo">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="requirements">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="designComments">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="appendix">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="references">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="rationale">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="openIssues">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="usageNotes">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="other">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="walkthrough">
                <xs:annotation>
                    <xs:documentation />
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="TemporalType">
        <xs:annotation>
            <xs:documentation>Specifies the various notions of time which are relevant for temporal databases</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="transaction">
                <xs:annotation>
                    <xs:documentation>Transaction time is the time period during which a fact is stored in the database</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="validStart">
                <xs:annotation>
                    <xs:documentation>Valid start time denotes the beginning of a time period during which a fact is true with respect to the real world</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="validEnd">
                <xs:annotation>
                    <xs:documentation>Valid end time denotes the ending of a time period during which a fact is true with respect to the real world</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="Temporal">
        <xs:annotation>
            <xs:documentation />
        </xs:annotation>

        <xs:attribute use="required" type="prov:TemporalType" name="type">
            <xs:annotation>
                <xs:documentation />
            </xs:annotation>
        </xs:attribute>

    </xs:complexType>

    <xs:element type="prov:Temporal" name="Temporal" />

    <xs:complexType name="SemanticConstraint">
        <xs:annotation>
            <xs:documentation />
        </xs:annotation>

        <xs:attribute use="optional" type="xs:string" name="conceptName">
            <xs:annotation>
                <xs:documentation />
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="conceptDomain">
            <xs:annotation>
                <xs:documentation />
            </xs:annotation>
        </xs:attribute>

        <xs:attribute use="optional" type="xs:string" name="conceptId">
            <xs:annotation>
                <xs:documentation />
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:SemanticConstraint" name="SemanticConstraint" />

    <xs:complexType name="UniqueConstraint">
        <xs:annotation>
            <xs:documentation>This stereotype tags a UML property as unique within its UML class and resulting SDO Type. if the unique constraint &#39;name&#39; is valued, the name is used all or in part as the final physical constraint id within a physical data store. Where multiple properties within a class are tagged with this stereotype, if the unique constraint &#39;name&#39; is valued for more than one UML property, these properties will be used together in the resulting physical constraint.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="optional" type="xs:string" name="group">
            <xs:annotation>
                <xs:documentation>Used to associate one or more UML properties within a class with a single constraint definition.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:UniqueConstraint" name="UniqueConstraint" />

    <xs:complexType name="Derivation">
        <xs:annotation>
            <xs:documentation>This UML stereotype is applied to a consumer UML named-element that is computed from the supplier element.</xs:documentation>
        </xs:annotation>
        <xs:choice>
	        <xs:element minOccurs="1" maxOccurs="1" type="prov:ClassRef" name="classSupplier">
	            <xs:annotation>
	                <xs:documentation>The supplier element or set of supplier elements which represent the derivation source.</xs:documentation>
	            </xs:annotation>
	        </xs:element>
	        <xs:element minOccurs="1" maxOccurs="1" type="prov:EnumerationRef" name="enumerationSupplier">
	            <xs:annotation>
	                <xs:documentation>The supplier element or set of supplier elements which represent the derivation source.</xs:documentation>
	            </xs:annotation>
	        </xs:element>
	        <xs:element minOccurs="1" maxOccurs="1" type="prov:PropertyRef" name="propertySupplier">
	            <xs:annotation>
	                <xs:documentation>The supplier element or set of supplier elements which represent the derivation source.</xs:documentation>
	            </xs:annotation>
	        </xs:element>
	        <xs:element minOccurs="1" maxOccurs="1" type="prov:PackageRef" name="packageSupplier">
	            <xs:annotation>
	                <xs:documentation>The supplier element or set of supplier elements which represent the derivation source.</xs:documentation>
	            </xs:annotation>
	        </xs:element>
        </xs:choice>

    </xs:complexType>

    <xs:element type="prov:Derivation" name="Derivation" />	
    
     <xs:complexType name="XmlProperty">
        <xs:annotation>
            <xs:documentation>This stereotype provides modelling-context specific alternative names for UML named elements within a model. While a UML logical model often differs greatly from a physical model for example, the intent is to provide enough naming and other context specific information to make the physical model entirely reflective or derivitive of the UML logical model. In other words support the generation of multiple context-specific models from a single UML logical model. Modelling context specific names or aliases are particularly important as they often differ greatly between modelling contexts due to various standard naming conventions or technology limitations such as name length.</xs:documentation>
        </xs:annotation>

        <xs:attribute use="required" type="prov:XmlNodeType" name="nodeType">
            <xs:annotation>
                <xs:documentation>Associates a given UML element with a physical data store element. Where the physical data store is a relational database, this tag contains the name of a relational database table, schema, column or other relational database element.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element type="prov:XmlProperty" name="XmlProperty" />
 
    <xs:simpleType name="XmlNodeType">
        <xs:annotation>
            <xs:documentation>Qualifies an XML node</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="element">
                <xs:annotation>
                    <xs:documentation>An XML element</xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="attribute">
                <xs:annotation>
                    <xs:documentation>An XML attribute</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
